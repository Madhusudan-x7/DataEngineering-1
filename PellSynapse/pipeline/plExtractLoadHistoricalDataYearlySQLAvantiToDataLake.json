{
	"name": "plExtractLoadHistoricalDataYearlySQLAvantiToDataLake",
	"properties": {
		"activities": [
			{
				"name": "SetCurrentYear",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "varCurrentYear",
					"value": {
						"value": "@formatDateTime(convertTimeZone(utcnow(),'UTC','Central Standard Time'),'yyyy')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Until1",
				"type": "Until",
				"dependsOn": [
					{
						"activity": "GetSQLTableList",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(formatdatetime(variables('varExtractDataEndDate'),'yyyy'),variables('varCurrentYear'))\n\n",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Set_YYYYMMDD_Path",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "varYYYYMMDD",
								"value": {
									"value": "@formatDateTime(variables('varExtractDataEndDate'),'yyyy/MM/dd_hh_mm')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "ExtractionMethod",
							"type": "Switch",
							"dependsOn": [
								{
									"activity": "Set_YYYYMMDD_Path",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"on": {
									"value": "@if(equals(activity('GetSQLTableList').output.value[0].SourceExtractMethod,'SQL'),'SQL',toUpper(activity('GetSQLTableList').output.value[0].SourceExtractMethod))",
									"type": "Expression"
								},
								"cases": [
									{
										"value": "SQL",
										"activities": [
											{
												"name": "SetNextExtractDataEndDateSQL",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "SetNextExtractDataStartDateSQL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "varExtractDataEndDate",
													"value": {
														"value": "@formatDateTime(addToTime(addToTime(variables('varExtractDataStartDate'),1,'Year'),-1,'Minute'),'yyyy-MM-dd HH:mm:ss')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "SetNextExtractDataStartDateSQL",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "LogCopySuccessDeltaSQL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "varExtractDataStartDate",
													"value": {
														"value": "@formatDateTime(variables('varExtractDataEndDate'),'yyyy-MM-dd HH:mm:ss')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CopyAvantiToADLSDeltaSQL",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@{activity('GetSQLTableList').output.value[0].SourceExtractSQL} \nWHERE (@{activity('GetSQLTableList').output.value[0].DeltaUpdateWatermarkColumnName} IS NOT NULL \nAND @{activity('GetSQLTableList').output.value[0].DeltaUpdateWatermarkColumnName} > \nCAST('@{variables('varExtractDataStartDate')}' as datetime2(0)) \nAND @{activity('GetSQLTableList').output.value[0].DeltaUpdateWatermarkColumnName} <= \nCAST ('@{variables('varExtractDataEndDate')}' as datetime2(0)));",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dsSqlAvantiParam",
														"type": "DatasetReference",
														"parameters": {
															"pSecret": {
																"value": "@pipeline().parameters.pAzureSQLSecretName",
																"type": "Expression"
															},
															"pSchemaName": {
																"value": "@pipeline().parameters.pAzureSQLSchemaName",
																"type": "Expression"
															},
															"pTableName": {
																"value": "@pipeline().parameters.pAzureSQLTableName",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dsADLSParquetParam",
														"type": "DatasetReference",
														"parameters": {
															"pDataLakeContainer": {
																"value": "@activity('GetSQLTableList').output.value[0].DataLakeDestinationContainer",
																"type": "Expression"
															},
															"pDataLakeDirectory": {
																"value": "@concat(activity('GetSQLTableList').output.value[0].DataLakeDestinationFolder,'/',activity('GetSQLTableList').output.value[0].SourceServerName,'/',activity('GetSQLTableList').output.value[0].SourceDatabaseName,'/delta/',toLower(activity('GetSQLTableList').output.value[0].SourceSchemaName),'/',activity('GetSQLTableList').output.value[0].SourceTableName,'/',variables('varYYYYMMDD'))",
																"type": "Expression"
															},
															"pDataLakeFile": {
																"value": "@concat('delta_',toLower(activity('GetSQLTableList').output.value[0].SourceTableName),'_',formatDateTime(variables('varExtractDataEndDate'),'yyyy_MM_dd_HH_mm_ss'),'_cst.parquet')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LogCopySuccessDeltaSQL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "CopyAvantiToADLSDeltaSQL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT '@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunId,\n'SQL_To_DataLake' as SourceToTargetType,\n'@{activity('GetSQLTableList').output.value[0].SourceExtractMethod}' as SourceExtractMethod,\n'@{activity('GetSQLTableList').output.value[0].SourceFullExtractOverrideFlag}' as SourceFullExtractOverrideFlag,\n'@{activity('GetSQLTableList').output.value[0].SourceServerName}' as SourceServerName,\n'@{activity('GetSQLTableList').output.value[0].SourceDatabaseName}' as SourceDatabaseName,\n'@{activity('GetSQLTableList').output.value[0].SourceSchemaName}' as SourceSchemaName,\n'@{activity('GetSQLTableList').output.value[0].SourceTableName}' as SourceTableName,\n'@{activity('GetSQLTableList').output.value[0].DataLakeDestinationContainer}' as TargetDataLakeContainerName,\n'@{concat(activity('GetSQLTableList').output.value[0].DataLakeDestinationFolder,'/DELTA/',activity('GetSQLTableList').output.value[0].SourceSchemaName,'/',activity('GetSQLTableList').output.value[0].SourceTableName,'/',variables('varYYYYMMDD'))}' as TargetDirectoryName,\n'@{concat('DELTA_',activity('GetSQLTableList').output.value[0].SourceTableName,'_',variables('varExtractDataEndDate'),'.parquet')}' as TargetFileName,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerID}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{activity('CopyAvantiToADLSDeltaSQL').output.rowsCopied}' as RowsCopied,\n'@{activity('CopyAvantiToADLSDeltaSQL').output.rowsRead}' as RowsRead,\n'@{activity('CopyAvantiToADLSDeltaSQL').output.usedParallelCopies}' as NoParallelCopies,\n'@{activity('CopyAvantiToADLSDeltaSQL').output.copyDuration}' as CopyDurationInSecs,\n'@{activity('CopyAvantiToADLSDeltaSQL').output.effectiveIntegrationRuntime}' as effectiveIntegrationRuntime,\n'@{activity('CopyAvantiToADLSDeltaSQL').output.executionDetails[0].source}' as SourceType,\n'@{activity('CopyAvantiToADLSDeltaSQL').output.executionDetails[0].sink}' as SinkType,\n'@{activity('CopyAvantiToADLSDeltaSQL').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('CopyAvantiToADLSDeltaSQL').output.executionDetails[0].start}' as CopyActivityStartTime,\n'@{utcnow()}' as CopyActivityEndTime,\n'@{activity('CopyAvantiToADLSDeltaSQL').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivityQueuingDurationInSecs,\n'@{activity('CopyAvantiToADLSDeltaSQL').output.executionDetails[0].detailedDurations.timeToFirstByte}' as CopyActivityPreCopyScriptDurationInSecs,\n'@{activity('CopyAvantiToADLSDeltaSQL').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivityTransferDurationInSecs,\nnull as ErrorMessage",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink"
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dsAzureSQLParam",
														"type": "DatasetReference",
														"parameters": {
															"pSecretName": {
																"value": "@pipeline().parameters.pAzureSQLSecretName",
																"type": "Expression"
															},
															"pSchemaName": {
																"value": "@pipeline().parameters.pAzureSQLSchemaName",
																"type": "Expression"
															},
															"pTableName": {
																"value": "@pipeline().parameters.pAzureSQLTableName",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dsAzureSQLParam",
														"type": "DatasetReference",
														"parameters": {
															"pSecretName": {
																"value": "@pipeline().parameters.pAzureSQLSecretName",
																"type": "Expression"
															},
															"pSchemaName": {
																"value": "@activity('GetSQLTableList').output.value[0].AuditSchemaName",
																"type": "Expression"
															},
															"pTableName": {
																"value": "@activity('GetSQLTableList').output.value[0].AuditTableName",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LogCopyFailureDeltaSQL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "CopyAvantiToADLSDeltaSQL",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT '@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunId,\n'SQL_To_DataLake' as SourceToTargetType,\n'@{activity('GetSQLTableList').output.value[0].SourceExtractMethod}' as SourceExtractMethod,\n'@{activity('GetSQLTableList').output.value[0].SourceFullExtractOverrideFlag}' as SourceFullExtractOverrideFlag,\n'@{activity('GetSQLTableList').output.value[0].SourceServerName}' as SourceServerName,\n'@{activity('GetSQLTableList').output.value[0].SourceDatabaseName}' as SourceDatabaseName,\n'@{activity('GetSQLTableList').output.value[0].SourceSchemaName}' as SourceSchemaName,\n'@{activity('GetSQLTableList').output.value[0].SourceTableName}' as SourceTableName,\n'@{activity('GetSQLTableList').output.value[0].DataLakeDestinationContainer}' as TargetDataLakeContainerName,\n'@{concat(activity('GetSQLTableList').output.value[0].DataLakeDestinationFolder,'/DELTA/',activity('GetSQLTableList').output.value[0].SourceSchemaName,'/',activity('GetSQLTableList').output.value[0].SourceTableName,'/',variables('varYYYYMMDD'))}' as TargetDirectoryName,\n'@{concat('DELTA_',activity('GetSQLTableList').output.value[0].SourceTableName,'_',variables('varExtractDataEndDate'),'.parquet')}' as TargetFileName,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerID}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\nnull as RowsCopied,\nnull as RowsRead,\n'@{activity('CopyAvantiToADLSDeltaSQL').output.usedParallelCopies}' as NoParallelCopies,\n'@{activity('CopyAvantiToADLSDeltaSQL').output.copyDuration}' as CopyDurationInSecs,\n'@{activity('CopyAvantiToADLSDeltaSQL').output.effectiveIntegrationRuntime}' as effectiveIntegrationRuntime,\n'@{activity('CopyAvantiToADLSDeltaSQL').output.executionDetails[0].source}' as SourceType,\n'@{activity('CopyAvantiToADLSDeltaSQL').output.executionDetails[0].sink}' as SinkType,\n'@{activity('CopyAvantiToADLSDeltaSQL').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('CopyAvantiToADLSDeltaSQL').output.executionDetails[0].start}' as CopyActivityStartTime,\n'@{utcnow()}' as CopyActivityEndTime,\n'' as CopyActivityQueuingDurationInSecs,\n'' as CopyActivityPreCopyScriptDurationInSecs,\n'' as CopyActivityTransferDurationInSecs,\n'@{replace(activity('CopyAvantiToADLSDeltaSQL').output.errors[0].Message,'''','')}' as ErrorMessage",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink"
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dsAzureSQLParam",
														"type": "DatasetReference",
														"parameters": {
															"pSecretName": {
																"value": "@pipeline().parameters.pAzureSQLSecretName",
																"type": "Expression"
															},
															"pSchemaName": {
																"value": "@pipeline().parameters.pAzureSQLSchemaName",
																"type": "Expression"
															},
															"pTableName": {
																"value": "@pipeline().parameters.pAzureSQLTableName",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dsAzureSQLParam",
														"type": "DatasetReference",
														"parameters": {
															"pSecretName": {
																"value": "@pipeline().parameters.pAzureSQLSecretName",
																"type": "Expression"
															},
															"pSchemaName": {
																"value": "@activity('GetSQLTableList').output.value[0].AuditSchemaName",
																"type": "Expression"
															},
															"pTableName": {
																"value": "@activity('GetSQLTableList').output.value[0].AuditTableName",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LoadDeltaLakeSQL",
												"type": "DatabricksNotebook",
												"dependsOn": [
													{
														"activity": "SetNextExtractDataEndDateSQL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": {
														"value": "@variables('varNotebookPath')",
														"type": "Expression"
													},
													"baseParameters": {
														"SourceServerName": {
															"value": "@activity('GetSQLTableList').output.value[0].SourceServerName",
															"type": "Expression"
														},
														"SourceDatabaseName": {
															"value": "@activity('GetSQLTableList').output.value[0].SourceDatabaseName",
															"type": "Expression"
														},
														"SourceSchemaName": {
															"value": "@activity('GetSQLTableList').output.value[0].SourceSchemaName",
															"type": "Expression"
														},
														"SourceTableName": {
															"value": "@activity('GetSQLTableList').output.value[0].SourceTableName",
															"type": "Expression"
														},
														"SourceTablePath": {
															"value": "@concat(activity('GetSQLTableList').output.value[0].DataLakeDestinationFolder,'/',activity('GetSQLTableList').output.value[0].SourceServerName,'/',activity('GetSQLTableList').output.value[0].SourceDatabaseName,'/delta/',toLower(activity('GetSQLTableList').output.value[0].SourceSchemaName),'/',activity('GetSQLTableList').output.value[0].SourceTableName,'/',variables('varYYYYMMDD'),'/')",
															"type": "Expression"
														},
														"SourceExtractMethod": {
															"value": "@activity('GetSQLTableList').output.value[0].SourceExtractMethod",
															"type": "Expression"
														},
														"SourceKeyColumnList": {
															"value": "@activity('GetSQLTableList').output.value[0].SourceKeyColumnList",
															"type": "Expression"
														},
														"DeltaUpdateWatermarkColumnName": {
															"value": "@activity('GetSQLTableList').output.value[0].DeltaUpdateWatermarkColumnName",
															"type": "Expression"
														},
														"HistoryLoadInd": "Y",
														"SCDType": {
															"value": "@activity('GetSQLTableList').output.value[0].SCDType",
															"type": "Expression"
														},
														"UnityCatalogName": {
															"value": "@activity('GetSQLTableList').output.value[0].UnityCatalogName",
															"type": "Expression"
														},
														"UCFlag": {
															"value": "@activity('GetSQLTableList').output.value[0].UCFlag",
															"type": "Expression"
														},
														"UCSchemaPrefix": {
															"value": "@activity('GetSQLTableList').output.value[0].UCSchemaPrefix",
															"type": "Expression"
														},
														"DataLakeDestinationContainer": {
															"value": "@activity('GetSQLTableList').output.value[0].DataLakeDestinationContainer",
															"type": "Expression"
														},
														"StorageAccountName": {
															"value": "@activity('GetSQLTableList').output.value[0].StorageAccountName",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "lnkAzureDatabricks",
													"type": "LinkedServiceReference"
												}
											}
										]
									},
									{
										"value": "DELTA",
										"activities": [
											{
												"name": "SetNextExtractDataEndDate",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "SetNextExtractDataStartDate",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "varExtractDataEndDate",
													"value": {
														"value": "@formatDateTime(addToTime(addToTime(variables('varExtractDataStartDate'),1,'Year'),-1,'Minute'),'yyyy-MM-dd HH:mm:ss')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "SetNextExtractDataStartDate",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "LogCopySuccessDelta",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "varExtractDataStartDate",
													"value": {
														"value": "@formatDateTime(variables('varExtractDataEndDate'),'yyyy-MM-dd HH:mm:ss')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CopyAvantiToADLSDelta",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "SELECT * FROM @{activity('GetSQLTableList').output.value[0].SourceSchemaName}.@{activity('GetSQLTableList').output.value[0].SourceTableName} \nWHERE (@{activity('GetSQLTableList').output.value[0].DeltaUpdateWatermarkColumnName} IS NOT NULL \nAND @{activity('GetSQLTableList').output.value[0].DeltaUpdateWatermarkColumnName} > \nCAST('@{variables('varExtractDataStartDate')}' as datetime2(0)) \nAND @{activity('GetSQLTableList').output.value[0].DeltaUpdateWatermarkColumnName} <= \nCAST ('@{variables('varExtractDataEndDate')}' as datetime2(0)));",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dsSqlAvantiParam",
														"type": "DatasetReference",
														"parameters": {
															"pSecret": {
																"value": "@pipeline().parameters.pAzureSQLSecretName",
																"type": "Expression"
															},
															"pSchemaName": {
																"value": "@pipeline().parameters.pAzureSQLSchemaName",
																"type": "Expression"
															},
															"pTableName": {
																"value": "@pipeline().parameters.pAzureSQLTableName",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dsADLSParquetParam",
														"type": "DatasetReference",
														"parameters": {
															"pDataLakeContainer": {
																"value": "@activity('GetSQLTableList').output.value[0].DataLakeDestinationContainer",
																"type": "Expression"
															},
															"pDataLakeDirectory": {
																"value": "@concat(activity('GetSQLTableList').output.value[0].DataLakeDestinationFolder,'/',activity('GetSQLTableList').output.value[0].SourceServerName,'/',activity('GetSQLTableList').output.value[0].SourceDatabaseName,'/delta/',toLower(activity('GetSQLTableList').output.value[0].SourceSchemaName),'/',activity('GetSQLTableList').output.value[0].SourceTableName,'/',variables('varYYYYMMDD'))",
																"type": "Expression"
															},
															"pDataLakeFile": {
																"value": "@concat('delta_',toLower(activity('GetSQLTableList').output.value[0].SourceTableName),'_',formatDateTime(variables('varExtractDataEndDate'),'yyyy_MM_dd_HH_mm_ss'),'_cst.parquet')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LogCopySuccessDelta",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "CopyAvantiToADLSDelta",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT '@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunId,\n'SQL_To_DataLake' as SourceToTargetType,\n'@{activity('GetSQLTableList').output.value[0].SourceExtractMethod}' as SourceExtractMethod,\n'@{activity('GetSQLTableList').output.value[0].SourceFullExtractOverrideFlag}' as SourceFullExtractOverrideFlag,\n'@{activity('GetSQLTableList').output.value[0].SourceServerName}' as SourceServerName,\n'@{activity('GetSQLTableList').output.value[0].SourceDatabaseName}' as SourceDatabaseName,\n'@{activity('GetSQLTableList').output.value[0].SourceSchemaName}' as SourceSchemaName,\n'@{activity('GetSQLTableList').output.value[0].SourceTableName}' as SourceTableName,\n'@{activity('GetSQLTableList').output.value[0].DataLakeDestinationContainer}' as TargetDataLakeContainerName,\n'@{concat(activity('GetSQLTableList').output.value[0].DataLakeDestinationFolder,'/DELTA/',activity('GetSQLTableList').output.value[0].SourceSchemaName,'/',activity('GetSQLTableList').output.value[0].SourceTableName,'/',variables('varYYYYMMDD'))}' as TargetDirectoryName,\n'@{concat('DELTA_',activity('GetSQLTableList').output.value[0].SourceTableName,'_',variables('varExtractDataEndDate'),'.parquet')}' as TargetFileName,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerID}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{activity('CopyAvantiToADLSDelta').output.rowsCopied}' as RowsCopied,\n'@{activity('CopyAvantiToADLSDelta').output.rowsRead}' as RowsRead,\n'@{activity('CopyAvantiToADLSDelta').output.usedParallelCopies}' as NoParallelCopies,\n'@{activity('CopyAvantiToADLSDelta').output.copyDuration}' as CopyDurationInSecs,\n'@{activity('CopyAvantiToADLSDelta').output.effectiveIntegrationRuntime}' as effectiveIntegrationRuntime,\n'@{activity('CopyAvantiToADLSDelta').output.executionDetails[0].source}' as SourceType,\n'@{activity('CopyAvantiToADLSDelta').output.executionDetails[0].sink}' as SinkType,\n'@{activity('CopyAvantiToADLSDelta').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('CopyAvantiToADLSDelta').output.executionDetails[0].start}' as CopyActivityStartTime,\n'@{utcnow()}' as CopyActivityEndTime,\n'@{activity('CopyAvantiToADLSDelta').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivityQueuingDurationInSecs,\n'@{activity('CopyAvantiToADLSDelta').output.executionDetails[0].detailedDurations.timeToFirstByte}' as CopyActivityPreCopyScriptDurationInSecs,\n'@{activity('CopyAvantiToADLSDelta').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivityTransferDurationInSecs,\nnull as ErrorMessage",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink"
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dsAzureSQLParam",
														"type": "DatasetReference",
														"parameters": {
															"pSecretName": {
																"value": "@pipeline().parameters.pAzureSQLSecretName",
																"type": "Expression"
															},
															"pSchemaName": {
																"value": "@pipeline().parameters.pAzureSQLSchemaName",
																"type": "Expression"
															},
															"pTableName": {
																"value": "@pipeline().parameters.pAzureSQLTableName",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dsAzureSQLParam",
														"type": "DatasetReference",
														"parameters": {
															"pSecretName": {
																"value": "@pipeline().parameters.pAzureSQLSecretName",
																"type": "Expression"
															},
															"pSchemaName": {
																"value": "@activity('GetSQLTableList').output.value[0].AuditSchemaName",
																"type": "Expression"
															},
															"pTableName": {
																"value": "@activity('GetSQLTableList').output.value[0].AuditTableName",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LogCopyFailureDelta",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "CopyAvantiToADLSDelta",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT '@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunId,\n'SQL_To_DataLake' as SourceToTargetType,\n'@{activity('GetSQLTableList').output.value[0].SourceExtractMethod}' as SourceExtractMethod,\n'@{activity('GetSQLTableList').output.value[0].SourceFullExtractOverrideFlag}' as SourceFullExtractOverrideFlag,\n'@{activity('GetSQLTableList').output.value[0].SourceServerName}' as SourceServerName,\n'@{activity('GetSQLTableList').output.value[0].SourceDatabaseName}' as SourceDatabaseName,\n'@{activity('GetSQLTableList').output.value[0].SourceSchemaName}' as SourceSchemaName,\n'@{activity('GetSQLTableList').output.value[0].SourceTableName}' as SourceTableName,\n'@{activity('GetSQLTableList').output.value[0].DataLakeDestinationContainer}' as TargetDataLakeContainerName,\n'@{concat(activity('GetSQLTableList').output.value[0].DataLakeDestinationFolder,'/DELTA/',activity('GetSQLTableList').output.value[0].SourceSchemaName,'/',activity('GetSQLTableList').output.value[0].SourceTableName,'/',variables('varYYYYMMDD'))}' as TargetDirectoryName,\n'@{concat('DELTA_',activity('GetSQLTableList').output.value[0].SourceTableName,'_',variables('varExtractDataEndDate'),'.parquet')}' as TargetFileName,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerID}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\nnull as RowsCopied,\nnull as RowsRead,\n'@{activity('CopyAvantiToADLSDelta').output.usedParallelCopies}' as NoParallelCopies,\n'@{activity('CopyAvantiToADLSDelta').output.copyDuration}' as CopyDurationInSecs,\n'@{activity('CopyAvantiToADLSDelta').output.effectiveIntegrationRuntime}' as effectiveIntegrationRuntime,\n'@{activity('CopyAvantiToADLSDelta').output.executionDetails[0].source}' as SourceType,\n'@{activity('CopyAvantiToADLSDelta').output.executionDetails[0].sink}' as SinkType,\n'@{activity('CopyAvantiToADLSDelta').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('CopyAvantiToADLSDelta').output.executionDetails[0].start}' as CopyActivityStartTime,\n'@{utcnow()}' as CopyActivityEndTime,\n'' as CopyActivityQueuingDurationInSecs,\n'' as CopyActivityPreCopyScriptDurationInSecs,\n'' as CopyActivityTransferDurationInSecs,\n'@{replace(activity('CopyAvantiToADLSDelta').output.errors[0].Message,'''','')}' as ErrorMessage",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink"
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dsAzureSQLParam",
														"type": "DatasetReference",
														"parameters": {
															"pSecretName": {
																"value": "@pipeline().parameters.pAzureSQLSecretName",
																"type": "Expression"
															},
															"pSchemaName": {
																"value": "@pipeline().parameters.pAzureSQLSchemaName",
																"type": "Expression"
															},
															"pTableName": {
																"value": "@pipeline().parameters.pAzureSQLTableName",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dsAzureSQLParam",
														"type": "DatasetReference",
														"parameters": {
															"pSecretName": {
																"value": "@pipeline().parameters.pAzureSQLSecretName",
																"type": "Expression"
															},
															"pSchemaName": {
																"value": "@activity('GetSQLTableList').output.value[0].AuditSchemaName",
																"type": "Expression"
															},
															"pTableName": {
																"value": "@activity('GetSQLTableList').output.value[0].AuditTableName",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LoadDeltaLake",
												"type": "DatabricksNotebook",
												"dependsOn": [
													{
														"activity": "SetNextExtractDataEndDate",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": {
														"value": "@variables('varNotebookPath')",
														"type": "Expression"
													},
													"baseParameters": {
														"SourceServerName": {
															"value": "@activity('GetSQLTableList').output.value[0].SourceServerName",
															"type": "Expression"
														},
														"SourceDatabaseName": {
															"value": "@activity('GetSQLTableList').output.value[0].SourceDatabaseName",
															"type": "Expression"
														},
														"SourceSchemaName": {
															"value": "@activity('GetSQLTableList').output.value[0].SourceSchemaName",
															"type": "Expression"
														},
														"SourceTableName": {
															"value": "@activity('GetSQLTableList').output.value[0].SourceTableName",
															"type": "Expression"
														},
														"SourceTablePath": {
															"value": "@concat(activity('GetSQLTableList').output.value[0].DataLakeDestinationFolder,'/',activity('GetSQLTableList').output.value[0].SourceServerName,'/',activity('GetSQLTableList').output.value[0].SourceDatabaseName,'/delta/',toLower(activity('GetSQLTableList').output.value[0].SourceSchemaName),'/',activity('GetSQLTableList').output.value[0].SourceTableName,'/',variables('varYYYYMMDD'),'/')",
															"type": "Expression"
														},
														"SourceExtractMethod": {
															"value": "@activity('GetSQLTableList').output.value[0].SourceExtractMethod",
															"type": "Expression"
														},
														"SourceKeyColumnList": {
															"value": "@activity('GetSQLTableList').output.value[0].SourceKeyColumnList",
															"type": "Expression"
														},
														"DeltaUpdateWatermarkColumnName": {
															"value": "@activity('GetSQLTableList').output.value[0].DeltaUpdateWatermarkColumnName",
															"type": "Expression"
														},
														"HistoryLoadInd": "Y",
														"SCDType": {
															"value": "@activity('GetSQLTableList').output.value[0].SCDType",
															"type": "Expression"
														},
														"UnityCatalogName": {
															"value": "@activity('GetSQLTableList').output.value[0].UnityCatalogName",
															"type": "Expression"
														},
														"UCFlag": {
															"value": "@activity('GetSQLTableList').output.value[0].UCFlag",
															"type": "Expression"
														},
														"UCSchemaPrefix": {
															"value": "@activity('GetSQLTableList').output.value[0].UCSchemaPrefix",
															"type": "Expression"
														},
														"DataLakeDestinationContainer": {
															"value": "@activity('GetSQLTableList').output.value[0].DataLakeDestinationContainer",
															"type": "Expression"
														},
														"StorageAccountName": {
															"value": "@activity('GetSQLTableList').output.value[0].StorageAccountName",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "lnkAzureDatabricks",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								]
							}
						}
					],
					"timeout": "7.00:00:00"
				}
			},
			{
				"name": "SetExtractDataStartDate",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "varExtractDataStartDate",
					"value": {
						"value": "@formatDateTime(pipeline().parameters.ExtractDataFrom,'yyyy-MM-dd HH:mm:ss')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "SetExtractDataEndDate",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "SetExtractDataStartDate",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "varExtractDataEndDate",
					"value": {
						"value": "@formatDateTime(addToTime(addToTime(variables('varExtractDataStartDate'),1,'Year'),-1,'Minute'),'yyyy-MM-dd HH:mm:ss')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "GetSQLTableList",
				"description": "getting the list of Sql tables from control table stored in Azure SQL",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "SetCurrentYear",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "SetExtractDataEndDate",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "select cts.*, lsc.*, utc.UnityCatalogName, utc.StorageAccountName,convert(varchar,isnull(DeltaLastWatermarkDateTime,'1900-01-01'),120) as FormattedLastWatermarkDateTime \nfrom etl.ControlTableSourceToAdlsLoad cts \ninner join etl.LinkedServiceConnectionStore lsc on cts.SourceDatabaseName = lsc.DatabaseName\ninner join etl.UnityCatalogConnectionStore utc on cts.IsActiveFlag = utc.IsActiveFlag\nwhere \nlsc.SourceServerName = '@{pipeline().parameters.pSourceServerName}'\nand cts.SourceDatabaseName = '@{pipeline().parameters.pSourceDatabaseName}'\nand cts.SourceSchemaName = '@{pipeline().parameters.pSourceSchemaName}'\nand cts.SourceTableName = '@{pipeline().parameters.pSourceTableName}'\nand cts.SourceType = 'PellaSQLServer';",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "dsAzureSQLParam",
						"type": "DatasetReference",
						"parameters": {
							"pSecretName": {
								"value": "@pipeline().parameters.pAzureSQLSecretName",
								"type": "Expression"
							},
							"pSchemaName": {
								"value": "@pipeline().parameters.pAzureSQLSchemaName",
								"type": "Expression"
							},
							"pTableName": {
								"value": "@pipeline().parameters.pAzureSQLTableName",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "UpdateControlTable",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Until1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "etl.UpdateControlTableSetHistoricalDataLoadYearFlag",
					"storedProcedureParameters": {
						"SourceServerName": {
							"value": {
								"value": "@activity('GetSQLTableList').output.value[0].SourceServerName",
								"type": "Expression"
							},
							"type": "String"
						},
						"SourceDatabaseName": {
							"value": {
								"value": "@activity('GetSQLTableList').output.value[0].SourceDatabaseName",
								"type": "Expression"
							},
							"type": "String"
						},
						"SourceSchemaName": {
							"value": {
								"value": "@activity('GetSQLTableList').output.value[0].SourceSchemaName",
								"type": "Expression"
							},
							"type": "String"
						},
						"SourceTableName": {
							"value": {
								"value": "@activity('GetSQLTableList').output.value[0].SourceTableName",
								"type": "Expression"
							},
							"type": "String"
						},
						"SourceType": {
							"value": {
								"value": "@activity('GetSQLTableList').output.value[0].SourceType",
								"type": "Expression"
							},
							"type": "String"
						},
						"WatermarkDateTime": {
							"value": {
								"value": "@variables('varExtractDataEndDate')",
								"type": "Expression"
							},
							"type": "Datetime"
						},
						"SourceExtractMethod": {
							"value": {
								"value": "@activity('GetSQLTableList').output.value[0].SourceExtractMethod",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "lnkAzureSqlParameterized",
					"type": "LinkedServiceReference",
					"parameters": {
						"SecretName": {
							"value": "@pipeline().parameters.pAzureSQLSecretName",
							"type": "Expression"
						}
					}
				}
			}
		],
		"parameters": {
			"ExtractDataFrom": {
				"type": "string",
				"defaultValue": "2017-01-01 00:00:00"
			},
			"pAzureSQLServerName": {
				"type": "string",
				"defaultValue": "sqlsvr-datalake-usc-dev.database.windows.net"
			},
			"pAzureSQLDatabaseName": {
				"type": "string",
				"defaultValue": "sqldb-dl-control-usc-dev"
			},
			"pAzureSQLUserName": {
				"type": "string",
				"defaultValue": "DataLake"
			},
			"pAzureSQLSecretName": {
				"type": "string",
				"defaultValue": "DLSqlCntrlConn"
			},
			"pAzureSQLSchemaName": {
				"type": "string",
				"defaultValue": "etl"
			},
			"pAzureSQLTableName": {
				"type": "string",
				"defaultValue": "ControlTableSourceToAdlsLoad"
			},
			"pSourceServerName": {
				"type": "string",
				"defaultValue": "oraerpdb"
			},
			"pSourceDatabaseName": {
				"type": "string",
				"defaultValue": "ERPPROD"
			},
			"pSourceSchemaName": {
				"type": "string",
				"defaultValue": "wip"
			},
			"pSourceTableName": {
				"type": "string",
				"defaultValue": "Wip_Lines"
			},
			"PipelineTriggerName": {
				"type": "string",
				"defaultValue": null
			}
		},
		"variables": {
			"varExtractDataStartDate": {
				"type": "String"
			},
			"varExtractDataEndDate": {
				"type": "String"
			},
			"varCurrentYear": {
				"type": "String"
			},
			"varYYYYMMDD": {
				"type": "String"
			},
			"varNotebookPath": {
				"type": "String",
				"defaultValue": "/BronzeToSilverDataProcessing/Load_Silver_Tables"
			}
		},
		"folder": {
			"name": "DataLake"
		},
		"annotations": [],
		"lastPublishTime": "2021-10-26T21:39:16Z"
	},
	"type": "Microsoft.Synapse/workspaces/pipelines"
}